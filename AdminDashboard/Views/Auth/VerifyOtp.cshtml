@model AdminDashboard.Models.Login.VerifyOtpRequest

@{
    Layout = null;
    ViewData["Title"] = "Xác minh mã OTP";
}

<!DOCTYPE html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - GoSix – Đi nhanh, sống trọn</title>

    <link rel="shortcut icon" href="~/css/images/icon_logo.png" type="image/x-icon" />
    <link rel="icon" href="~/css/images/icon_logo.png" type="image/png" />

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/AdminDashboard.styles.css" asp-append-version="true" />
    <style>
        body {
            background-image: url("https://cdn.getyourguide.com/img/country/58d3f96892f56.jpeg/88.jpg");
            background-size: cover;
            background-position: center;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }

        .otp-Form {
            width: 320px;
            height: auto; 
            background-color: rgb(255, 255, 255,0.9);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px 30px;
            gap: 20px;
            position: relative;
            box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.082);
            border-radius: 15px;
        }

        .mainHeading {
            font-size: 1.2em; 
            color: rgb(15, 15, 15);
            font-weight: 700;
        }

        .otpSubheading {
            font-size: 0.9em;
            color: black;
            line-height: 1.5;
            text-align: center;
        }

        .inputContainer {
            width: 100%;
            display: flex;
            flex-direction: row;
            gap: 10px;
            align-items: center;
            justify-content: center;
        }

        .otp-input {
            background-color: rgb(255,165,0);
            width: 40px;
            height: 40px;
            text-align: center;
            border: none;
            border-radius: 7px;
            caret-color: #FF9933;
            color: rgb(44, 44, 44);
            outline: none;
            font-weight: 600;
            font-size: 1.2em; 
        }

            .otp-input:focus,
            .otp-input:valid {
                background-color: #FFCC00;
                transition-duration: .3s;
            }

       @@keyframes glowing-pulse {
          0% {
            box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.7);
          }

          50% {
            box-shadow: 0 0 0 20px rgba(255, 255, 255, 0.4);
          }

          100% {
            box-shadow: 0 0 0 0 rgba(255, 255, 255, 0);
          }
        }

        .verifyButton {
          position: relative;
          display: inline-block;
          background: linear-gradient(to right, #FFB900, #FF7730);
          background-size: 200% auto;
          border: none;
          border-radius: 25px;
          color: white;
          padding: 10px 20px;
          font-size: 12px;
          text-transform: uppercase;
          box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.7);
          animation: glowing-pulse 2s infinite;
          transition: color 0.3s ease, box-shadow 0.3s ease, transform 0.3s ease;
        }

        .verifyButton::before {
          content: "";
          position: absolute;
          top: -5px;
          left: -5px;
          right: -5px;
          bottom: -5px;
          border-radius: 30px;
          box-shadow: 0 0 20px #FF7730;
          opacity: 0;
          pointer-events: none;
          transition: opacity 0.3s ease;
        }

        .verifyButton::after {
          content: "";
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
        }

        .verifyButton:hover {
          color: #FFB900;
          box-shadow: 0 0 0 10px rgba(255, 255, 255, 0.4);
          transform: scale(1.05);
          background-position: right center;
        }

        .verifyButton:hover::before {
          opacity: 1;
        }

       
        .resendNote {
            font-size: 0.8em;
            color: black;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
        }

        .resendBtn {
            background-color: transparent;
            border: none;
            color: #FF6600;
            cursor: pointer;
            font-size: 1em; 
            font-weight: 700;
        }

    </style>
</head>
<body>

    <form asp-action="VerifyOtp" method="post" class="otp-Form" id="otp-form">

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger" role="alert">
                @Html.ValidationSummary(false, "", new { @class = "text-danger" })
            </div>
        }

        <span class="mainHeading">Xác minh OTP</span>
        <p class="otpSubheading">Chúng tôi đã gửi mã OTP 6 chữ số đến email: <br> <strong>@Model.Email</strong></p>

        <input asp-for="Email" type="hidden" />

        <input asp-for="OtpCode" id="combinedOtp" type="hidden" />

        <div class="inputContainer">
            <input required="required" maxlength="1" type="text" class="otp-input" name="otp1">
            <input required="required" maxlength="1" type="text" class="otp-input" name="otp2">
            <input required="required" maxlength="1" type="text" class="otp-input" name="otp3">
            <input required="required" maxlength="1" type="text" class="otp-input" name="otp4">
            <input required="required" maxlength="1" type="text" class="otp-input" name="otp5">
            <input required="required" maxlength="1" type="text" class="otp-input" name="otp6">
        </div>

        <div style="padding-top:20px; padding-bottom:10px;">
            <button class="verifyButton" type="submit">Xác minh</button>
        </div>

        <p class="resendNote">
            Không nhận được mã?
            <a asp-controller="Auth" asp-action="ForgotPass" asp-route-email="@Model.Email" class="resendBtn" style="text-decoration: none;">Gửi lại mã</a>
        </p>

        <a asp-controller="Auth" asp-action="ForgotPass" class="btn btn-sm btn-outline-secondary mt-2">Quay lại</a>

    </form>

    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('otp-form');
            const inputs = document.querySelectorAll('.otp-input');
            const combinedOtpInput = document.getElementById('combinedOtp');

            inputs.forEach((input, index) => {
                input.addEventListener('input', (e) => {
                    e.target.value = e.target.value.replace(/[^0-9]/g, '');

                    if (e.target.value.length === 1 && index < inputs.length - 1) {
                        inputs[index + 1].focus();
                    }
                });

                input.addEventListener('keydown', (e) => {
                    if (e.key === 'Backspace' && e.target.value.length === 0 && index > 0) {
                        inputs[index - 1].focus();
                    }
                });
            });

            inputs[0].addEventListener('paste', (e) => {
                e.preventDefault();
                const pasteData = (e.clipboardData || window.clipboardData).getData('text');

                if (pasteData.length === 6 && /^[0-9]+$/.test(pasteData)) {
                    inputs.forEach((input, index) => {
                        input.value = pasteData[index];
                    });
                    inputs[5].focus(); 
                }
            });
            form.addEventListener('submit', function () {
                let combinedOtp = '';
                inputs.forEach(input => {
                    combinedOtp += input.value;
                });
                combinedOtpInput.value = combinedOtp;
            });
            const serverOtpValue = combinedOtpInput.value;
            if (serverOtpValue && serverOtpValue.length === 6) {
                inputs.forEach((input, index) => {
                    input.value = serverOtpValue[index];
                });
            }
        });
    </script>
</body>
</html>