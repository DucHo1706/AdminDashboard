@{
    Layout = null;
    ViewData["Title"] = "Đặt lại mật khẩu";
}

<!DOCTYPE html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale-1.0" />
    <title>@ViewData["Title"] - GoSix – Đi nhanh, sống trọn</title>

    <link rel="shortcut icon" href="~/css/images/icon_logo.png" type="image/x-icon" />
    <link rel="icon" href="~/css/images/icon_logo.png" type="image/png" />

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/AdminDashboard.styles.css" asp-append-version="true" />

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

    <style>
        body {
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            /* === THAY ĐỔI: Gradient Vàng -> Cam === */
            background: linear-gradient(135deg, #FFD54F 0%, #FF9800 100%);
            padding: 1rem;
        }

        .card {
            width: 100%;
            max-width: 450px;
            /* === GIỮ NGUYÊN: Nền thẻ màu Trắng === */
            background-color: rgb(255, 255, 255);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border-radius: 15px;
            border: none;
            /* Bỏ height: 600px để thẻ tự co giãn */
        }

        .content {
            padding: 2.5rem;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        /* Căn trái nội dung trong form cho dễ đọc */
        .form-label,
        .form-control,
        .password-strength,
        .password-requirements {
            text-align: left;
        }

        .password-strength {
            font-size: 0.9rem;
            font-weight: bold;
        }

        .strength-weak {
            color: #dc3545;
        }

        .strength-medium {
            color: #ffc107;
        }

        .strength-strong {
            color: #198754;
        }

        .password-requirements {
            font-size: 0.8rem;
            color: #6c757d;
            list-style-type: none;
            padding-left: 0;
            margin-top: 10px;
        }

        .requirement {
            margin-bottom: 2px;
        }

            /* Dùng CSS của Bootstrap cho met/unmet */
            .requirement.met {
                color: #198754; /* Green */
            }

            .requirement.unmet {
                color: #dc3545; /* Red */
            }

            .requirement .icon {
                display: inline-block;
                width: 20px;
            }

        /* === THÊM MỚI: Class cho nút màu cam === */
        .btn-custom-orange {
            background-color: #F57C00;
            border-color: #F57C00;
            color: #FFFFFF; /* Chữ màu trắng */
        }

            .btn-custom-orange:hover, .btn-custom-orange:focus {
                background-color: #E65100;
                border-color: #E65100;
                color: #FFFFFF;
            }

        /* Link quay lại */
        .back-link {
            background: none;
            border: none;
            color: #F57C00; /* Màu Cam */
            text-decoration: none;
            cursor: pointer;
            font-size: 14px;
            margin-top: 15px;
            padding: 0;
        }

            .back-link:hover {
                text-decoration: underline;
                color: #E65100;
            }

    </style>
</head>
<body>
    <div class="card shadow-sm">
        <form asp-action="SetNewPassword" method="post">
            <div class="content">

                @if (!ViewData.ModelState.IsValid)
                {
                    <div class="alert alert-danger w-100" role="alert">
                        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                    </div>
                }

                <h3 class="mb-3 fw-bold">Đặt lại mật khẩu</h3>
                <p class="text-muted mb-4">Vui lòng nhập mật khẩu mới cho tài khoản của bạn.</p>

                <input type="hidden" name="email" value="@ViewBag.Email" />

                <div class="mb-3 w-100">
                    <label for="newPassword" class="form-label fw-bold">Mật khẩu mới</label>
                    <input type="password" name="newPassword" id="newPassword" class="form-control" placeholder="Nhập mật khẩu mới" required />

                    <div id="passwordStrength" class="password-strength mt-2"></div>
                    <ul id="passwordRequirements" class="password-requirements"></ul>
                </div>

                <div class="mb-3 w-100">
                    <label for="confirmPassword" class="form-label fw-bold">Xác nhận mật khẩu</label>
                    <input type="password" name="confirmPassword" id="confirmPassword" class="form-control" placeholder="Xác nhận mật khẩu mới" required />
                </div>

                <div class="d-grid gap-2 col-10 mx-auto mt-3">
                    <button type="submit" class="btn btn-custom-orange btn-lg">Đặt lại mật khẩu</button>
                </div>

                <a asp-controller="Auth" asp-action="Login" class="back-link">Quay lại đăng nhập</a>

            </div>
        </form>
    </div>

    <script>
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const passwordStrengthDiv = document.getElementById('passwordStrength');
        const passwordRequirementsDiv = document.getElementById('passwordRequirements');
        const form = document.querySelector('form');

        // Định nghĩa các yêu cầu
        const requirementsConfig = [
            { regex: /.{8,}/, text: 'Ít nhất 8 ký tự' },
            { regex: /[A-Z]/, text: 'Có chữ hoa' },
            { regex: /[a-z]/, text: 'Có chữ thường' },
            { regex: /[0-9]/, text: 'Có số' },
            { regex: /[^A-Za-z0-9]/, text: 'Có ký tự đặc biệt' }
        ];

        function checkPasswordStrength(password) {
            let strength = 0;
            const requirements = [];

            requirementsConfig.forEach(req => {
                const met = req.regex.test(password);
                if (met) {
                    strength++;
                }
                requirements.push({ text: req.text, met: met });
            });

            return { strength, requirements, allMet: strength === requirementsConfig.length };
        }

        function updatePasswordStrength() {
            const password = newPasswordInput.value;
            const { strength, requirements, allMet } = checkPasswordStrength(password);

            // 1. Cập nhật thanh trạng thái
            if (password.length === 0) {
                passwordStrengthDiv.textContent = '';
                passwordRequirementsDiv.innerHTML = '';
                return;
            }

            let strengthText = '';
            let strengthClass = '';
            if (strength <= 2) {
                strengthText = 'Mật khẩu yếu';
                strengthClass = 'strength-weak';
            } else if (strength <= 4) {
                strengthText = 'Mật khẩu trung bình';
                strengthClass = 'strength-medium';
            } else {
                strengthText = 'Mật khẩu mạnh';
                strengthClass = 'strength-strong';
            }

            passwordStrengthDiv.textContent = strengthText;
            passwordStrengthDiv.className = `password-strength mt-2 ${strengthClass}`;

            // 2. Cập nhật danh sách yêu cầu
            passwordRequirementsDiv.innerHTML = requirements.map(req => {
                const icon = req.met
                    ? '<i class="bi bi-check-circle-fill icon"></i>'
                    : '<i class="bi bi-x-circle icon"></i>';
                return `<li class="requirement ${req.met ? 'met' : 'unmet'}">${icon} ${req.text}</li>`;
            }).join('');
        }

        function checkPasswordMatch() {
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (confirmPassword.length === 0) {
                confirmPasswordInput.classList.remove('is-valid');
                confirmPasswordInput.classList.remove('is-invalid');
                return;
            }

            if (newPassword === confirmPassword) {
                confirmPasswordInput.classList.add('is-valid');
                confirmPasswordInput.classList.remove('is-invalid');
            } else {
                confirmPasswordInput.classList.add('is-invalid');
                confirmPasswordInput.classList.remove('is-valid');
            }
        }

        // Gắn sự kiện
        newPasswordInput.addEventListener('input', () => {
            updatePasswordStrength();
            checkPasswordMatch(); // Sửa lỗi logic: kiểm tra lại match khi pass 1 thay đổi
        });

        confirmPasswordInput.addEventListener('input', checkPasswordMatch);

        // Form validation
        form.addEventListener('submit', function(e) {
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            const { allMet } = checkPasswordStrength(newPassword);

            // Kiểm tra mật khẩu khớp
            if (newPassword !== confirmPassword) {
                e.preventDefault();
                alert('Mật khẩu xác nhận không khớp!');
                confirmPasswordInput.focus();
                return;
            }

            // Kiểm tra độ mạnh (phải đạt tất cả yêu cầu)
            if (!allMet) {
                e.preventDefault();
                alert('Mật khẩu không đủ mạnh! Vui lòng đáp ứng tất cả các yêu cầu.');
                newPasswordInput.focus();
                return;
            }
        });
    </script>
</body>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}