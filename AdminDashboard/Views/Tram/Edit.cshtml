@* //Tan Huy - GoSix// *@
@model AdminDashboard.Models.Tram

@{
    ViewData["Title"] = "Chỉnh Sửa Trạm";
}

<div class="edit-form-container">
    <div class="form-panel">
        <form asp-action="Edit" onsubmit="return validateForm()">
            <input type="hidden" asp-for="IdTram" />
            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

            <div class="form-header">
                <h2><i class="fas fa-edit"></i> @ViewData["Title"]</h2>
                <p>Cập nhật thông tin chi tiết cho trạm hiện tại.</p>
            </div>

            <div class="form-body">
                <!-- Tên trạm -->
                <div class="form-group-custom">
                    <label asp-for="TenTram" class="control-label">
                        <i class="fas fa-building"></i> Tên Trạm
                    </label>
                    <input asp-for="TenTram" class="form-control" placeholder="Nhập tên trạm..." />
                    <span asp-validation-for="TenTram" class="text-danger"></span>
                </div>

                <!-- Tỉnh/Thành phố -->
                <div class="form-group-custom">
                    <label class="control-label"><i class="fas fa-city"></i> Tỉnh/Thành phố</label>
                    <select id="province" class="form-select" required>
                        <option value="">-- Chọn Tỉnh/Thành phố --</option>
                    </select>
                    @Html.HiddenFor(model => model.Tinh, new { id = "hiddenTinh" })
                    <span class="text-danger" id="provinceValidation" style="display:none;">Vui lòng chọn tỉnh/thành phố</span>
                </div>

                <!-- Quận/Huyện -->
                <div class="form-group-custom">
                    <label class="control-label"><i class="fas fa-map"></i> Quận/Huyện</label>
                    <select id="district" class="form-select" disabled required>
                        <option value="">-- Chọn Quận/Huyện --</option>
                    </select>
                    @Html.HiddenFor(model => model.Huyen, new { id = "hiddenHuyen" })
                    <span class="text-danger" id="districtValidation" style="display:none;">Vui lòng chọn quận/huyện</span>
                </div>

                <!-- Phường/Xã -->
                <div class="form-group-custom">
                    <label class="control-label"><i class="fas fa-map-pin"></i> Phường/Xã</label>
                    <select id="ward" class="form-select" disabled required>
                        <option value="">-- Chọn Phường/Xã --</option>
                    </select>
                    @Html.HiddenFor(model => model.Xa, new { id = "hiddenXa" })
                    <span class="text-danger" id="wardValidation" style="display:none;">Vui lòng chọn phường/xã</span>
                </div>

                <!-- Địa chỉ chi tiết -->
                <div class="form-group-custom">
                    <label class="control-label"><i class="fas fa-home"></i> Địa chỉ chi tiết</label>
                    <input id="detailAddress" class="form-control" placeholder="Ví dụ: 93 Giảng Võ..." required />
                    <span class="text-danger" id="detailAddressValidation" style="display:none;">Vui lòng nhập địa chỉ chi tiết</span>
                </div>

                @Html.HiddenFor(model => model.DiaChiTram, new { id = "fullAddress" })
            </div>

            <div class="form-footer">
                <a asp-action="Index" class="btn btn-secondary-custom">
                    <i class="fas fa-arrow-left"></i> Hủy
                </a>
                <button type="submit" class="btn btn-primary-custom">
                    <i class="fas fa-save"></i> Lưu Thay Đổi
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        const provinceApi = 'https://provinces.open-api.vn/api/p/';
        const districtApi = 'https://provinces.open-api.vn/api/d/';
        const wardApi = 'https://provinces.open-api.vn/api/w/';

        // Tách địa chỉ cũ từ dữ liệu Model
        function parseOldAddress() {
            const oldAddress = "@Html.Raw(Model.DiaChiTram)";
            const oldTinh = "@Html.Raw(Model.Tinh)";
            const oldHuyen = "@Html.Raw(Model.Huyen)";
            const oldXa = "@Html.Raw(Model.Xa)";
            if (oldTinh && oldHuyen && oldXa) {
                return {
                    province: oldTinh,
                    district: oldHuyen,
                    ward: oldXa,
                    detail: oldAddress.replace(`${oldXa}, ${oldHuyen}, ${oldTinh}`, '').replace(/,+$/, '').trim()
                };
            }
            const parts = oldAddress.split(',').map(p => p.trim());
            if (parts.length >= 3) {
                return {
                    province: parts[parts.length - 1],
                    district: parts[parts.length - 2],
                    ward: parts[parts.length - 3],
                    detail: parts.slice(0, parts.length - 3).join(', ')
                };
            }
            return { province: '', district: '', ward: '', detail: oldAddress };
        }

        async function loadProvinces() {
            const res = await fetch(provinceApi);
            const provinces = await res.json();
            const select = document.getElementById("province");
            provinces.forEach(p => {
                const opt = document.createElement("option");
                opt.value = p.code; opt.textContent = p.name;
                select.appendChild(opt);
            });

            const old = parseOldAddress();
            if (old.province) {
                const match = provinces.find(p => p.name === old.province);
                if (match) {
                    select.value = match.code;
                    await loadDistricts(match.code, old.district);
                }
            }
            document.getElementById('detailAddress').value = old.detail || '';
            combineAddress();
        }

        async function loadDistricts(provinceCode, selectedDistrict = '') {
            const res = await fetch(`${provinceApi}${provinceCode}?depth=2`);
            const province = await res.json();
            const select = document.getElementById("district");
            select.innerHTML = '<option value="">-- Chọn Quận/Huyện --</option>';
            select.disabled = false;
            province.districts.forEach(d => {
                const opt = document.createElement("option");
                opt.value = d.code; opt.textContent = d.name;
                select.appendChild(opt);
            });

            if (selectedDistrict) {
                const match = province.districts.find(d => d.name === selectedDistrict);
                if (match) {
                    select.value = match.code;
                    await loadWards(match.code, parseOldAddress().ward);
                }
            }
            combineAddress();
        }

        async function loadWards(districtCode, selectedWard = '') {
            const res = await fetch(`${districtApi}${districtCode}?depth=2`);
            const district = await res.json();
            const select = document.getElementById("ward");
            select.innerHTML = '<option value="">-- Chọn Phường/Xã --</option>';
            select.disabled = false;
            district.wards.forEach(w => {
                const opt = document.createElement("option");
                opt.value = w.code; opt.textContent = w.name;
                select.appendChild(opt);
            });
            if (selectedWard) {
                const match = district.wards.find(w => w.name === selectedWard);
                if (match) select.value = match.code;
            }
            combineAddress();
        }

        function combineAddress() {
            const provinceText = document.getElementById('province').selectedOptions[0]?.textContent || '';
            const districtText = document.getElementById('district').selectedOptions[0]?.textContent || '';
            const wardText = document.getElementById('ward').selectedOptions[0]?.textContent || '';
            const detailAddress = document.getElementById('detailAddress').value;

            document.getElementById('hiddenTinh').value = provinceText;
            document.getElementById('hiddenHuyen').value = districtText;
            document.getElementById('hiddenXa').value = wardText;

            const full = [detailAddress, wardText, districtText, provinceText].filter(x => x).join(', ');
            document.getElementById('fullAddress').value = full;
        }

        function validateForm() {
            let ok = true;
            ['province', 'district', 'ward', 'detailAddress'].forEach(id => {
                const el = document.getElementById(id);
                const warn = document.getElementById(id + 'Validation');
                if (!el.value.trim()) { warn.style.display = 'block'; ok = false; }
                else warn.style.display = 'none';
            });
            if (!ok) alert('Vui lòng điền đầy đủ thông tin!');
            return ok;
        }

        document.addEventListener("DOMContentLoaded", () => {
            loadProvinces();
            document.getElementById("province").addEventListener("change", e => e.target.value && loadDistricts(e.target.value));
            document.getElementById("district").addEventListener("change", e => e.target.value && loadWards(e.target.value));
            document.getElementById("ward").addEventListener("change", combineAddress);
            document.getElementById("detailAddress").addEventListener("input", combineAddress);
        });
    </script>
}

<style>
    body {
        background-color: #f4f6f9;
        font-family: 'Poppins', sans-serif;
    }

    .edit-form-container {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding: 40px 15px;
    }

    .form-panel {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 800px;
        overflow: hidden;
    }

    .form-header {
        background-color: #fff7ec;
        padding: 25px 30px;
        border-bottom: 1px solid #ffe2b6;
    }

        .form-header h2 {
            font-weight: 700;
            font-size: 24px;
            color: #3f4c6b;
            margin: 0;
        }

            .form-header h2 i {
                color: #ffc107;
                margin-right: 12px;
            }

        .form-header p {
            color: #8c96a5;
            margin: 5px 0 0 0;
        }

    .form-body {
        padding: 30px;
    }

    .form-group-custom {
        margin-bottom: 25px;
    }

    .control-label {
        font-weight: 600;
        color: #5b6a82;
        margin-bottom: 8px;
        display: block;
    }

        .control-label i {
            margin-right: 8px;
            color: #ff9800;
        }

    .form-control, .form-select {
        height: 48px;
        border-radius: 8px;
        border: 1px solid #ced4da;
        padding: 0 15px;
        font-size: 15px;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

        .form-control:focus, .form-select:focus {
            border-color: #ff9800;
            box-shadow: 0 0 0 3px rgba(255, 152, 0, 0.2);
            outline: none;
        }

    .form-footer {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        padding: 20px 30px;
        background-color: #fff7ec;
        border-top: 1px solid #ffe2b6;
    }

    .btn-primary-custom, .btn-secondary-custom {
        padding: 10px 22px;
        font-weight: 600;
        font-size: 15px;
        border-radius: 8px;
        border: none;
        text-decoration: none;
        transition: all 0.3s ease;
    }

    .btn-primary-custom {
        background-color: #ff9800;
        color: #fff;
        box-shadow: 0 4px 12px rgba(255, 152, 0, 0.3);
    }

        .btn-primary-custom:hover {
            background-color: #f57c00;
            transform: translateY(-2px);
        }

    .btn-secondary-custom {
        background-color: #6c757d;
        color: #fff;
    }

        .btn-secondary-custom:hover {
            background-color: #5a6268;
        }
</style>
